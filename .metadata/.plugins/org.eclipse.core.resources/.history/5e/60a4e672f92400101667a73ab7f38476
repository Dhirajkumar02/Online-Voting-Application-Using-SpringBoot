package in.scalive.votingApp.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import in.scalive.votingApp.entity.Candidate;
import in.scalive.votingApp.entity.Vote;
import in.scalive.votingApp.exception.ResourceNotFoundException;
import in.scalive.votingApp.repository.CandidateRepository;

@Service
public class CandidateService {
	private CandidateRepository candidateRepository;

	@Autowired
	public CandidateService(CandidateRepository candidateRepository) {

		this.candidateRepository = candidateRepository;
	}

	public Candidate addCandidate(Candidate candidate) {
		return candidateRepository.save(candidate);
	}

	public List<Candidate> getAllCandidates() {
		return candidateRepository.findAll();
	}

	public Candidate getCandidateById(Long id) {
		Candidate candidate = candidateRepository.findById(id).orElse(null);
		if (candidate == null) {
			throw new ResourceNotFoundException("Candidate with id:" + id + " not found");
		}
		return candidate;
	}

	public Candidate updateCandidate(Long id, Candidate updatedCandidate) {
		Candidate candidate = getCandidateById(id);
		if (updatedCandidate.getName() != null) {
			candidate.setName(updatedCandidate.getName());
		}
		if (updatedCandidate.getPartyName() != null) {
			candidate.setPartyName(updatedCandidate.getPartyName());
		}
		return candidateRepository.save(candidate);
	}

	public void deleteCandidate(Long id) {
		Candidate candidate = getCandidateById(id);
		List<Vote> votes = candidate.getVote();
		for (Vote v : votes) {
			v.setCandidate(null);
		}
		candidate.getVote().clear();
		candidateRepository.delete(candidate);
	}

}
